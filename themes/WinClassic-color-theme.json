{
    "name": "WinClassic",
    "type": "light",
    //#region UI

    "colors":
    {
        "activityBar.foreground":                            "#EAE8E8CC",
        "activityBar.background":                            "#D4D0C8",

        "activityBar.activeBackground":                      "#007ACC",
        "activityBar.activeBorder":                          "#007ACC",
        "activityBar.activeFocusBorder":                     "#DDDDDD",

        "activityBar.border":                                "#867E6E",
        "activityBar.dropBorder":                            "#E0DCD4",

        "activityBar.inactiveForeground":                    "#EAE8E8",

        "activityBarBadge.foreground":                       "#EDEDED",
        "activityBarBadge.background":                       "#007ACC",

        "badge.background":                                  "#C5060B",
        "badge.foreground":                                  "#EFEFEF",

        "contrastBorder":                                    "#4499FF33",

        // Combination of non-opaque background and border causes irregular
        // patterning probably due to line heights? Issue persists even with
        // fully transparent border.
        // "editor.findRangeHighlightBorder":                    "#00000000",
        "editor.findRangeHighlightBackground":               "#B4B4B44B",
        "editor.findMatchHighlightBorder":                   "#FFE6BBBB",
        "editor.findMatchHighlightBackground":               "#FFE6BBBB",

        "editor.foldBackground":                             "#4499FF10",

        "editor.background":                                 "#EFEFEF",
        "editor.foreground":                                 "#000000",

        "editor.lineHighlightBackground":                    "#E4E4E490",
        "editor.lineHighlightBorder":                        "#E4E4E400",

        "editor.rangeHighlightBackground":                   "#66BBFF55",
        "editor.selectionBackground":                        "#4499FF55",

        "editorCodeLens.foreground":                         "#444444",

        "editorCursor.foreground":                           "#003E6A",
        "editorCursor.background":                           "#EFEFEF",

        "editorIndentGuide.activeBackground":                "#0018A260",
        "editorIndentGuide.background":                      "#C6DDFF80",

        "editorLineNumber.foreground":                       "#808080",

        "editorOverviewRuler.border":                        "#C8C8C8",
        "editorOverviewRuler.wordHighlightStrongForeground": "#003E6A",

        "editorSuggestWidget.foreground":                    "#222222",
        "editorSuggestWidget.background":                    "#F3F3F3",
        "editorSuggestWidget.border":                        "#C8C8C8",
        "editorSuggestWidget.selectedForeground":            "#222222",
        "editorSuggestWidget.selectedBackground":            "#0066FF22",
        "editorSuggestWidget.highlightForeground":           "#000030",
        "editorSuggestWidget.focusHighlightForeground":      "#003E6A",

        // Used for other binding sites of currently hovered symbol
        // EDIT: Nevermind, its exactly what the description says lol
        "editor.wordHighlightStrongBorder":                  "#4499FF00",
        "editor.wordHighlightStrongBackground":              "#4499FF55",
        // Used for other currently hovered symbol
        // EDIT: Nevermind, its exactly what the description says lol
        "editor.wordHighlightBackground":                    "#44AAFF40",
        "editor.wordHighlightBorder":                        "#003E6A40",

        "editorWhitespace.foreground":                       "#003E6A20",

        "editorWidget.background":                           "#EDEDED",
        "editorWidget.border":                               "#40404020",
        "editorWidget.foreground":                           "#222222",
        "editorWidget.resizeBorder":                         "#00000000",

        "errorForeground":                                   "#990000",

        "input.foreground":                                  "#222222",
        "input.background":                                  "#FFFFFF",
        "input.placeholderForeground":                       "#C8C8C8",
        "input.border":                                      "#C8C8C8",

        "inputOption.activeForeground":                      "#867E6E",
        "inputOption.activeBackground":                      "#66BBFF55",

        "quickInput.foreground":                             "#222222DD",
        "quickInput.background":                             "#F3F3F3",
        "quickInputList.focusForeground":                    "#222222",
        "quickInputList.focusBackground":                    "#0066FF22",

        "list.activeSelectionForeground":                    "#EEEEEE",
        "list.activeSelectionBackground":                    "#0066FF",
        "list.inactiveSelectionForeground":                  "#404040",
        "list.inactiveSelectionBackground":                  "#0066FF22",
        "list.inactiveFocusBackground":                      "#EEEEEE",
        "list.dropBackground":                               "#C6DEFF",
        "list.errorForeground":                              "#990000",
        "list.focusForeground":                              "#080707",
        "list.focusBackground":                              "#0066FF22",
        "list.hoverForeground":                              "#404040",
        "list.hoverBackground":                              "#00000011",
        "list.highlightForeground":                          "#404040",
        "list.invalidItemForeground":                        "#990000",
        "list.warningForeground":                            "#BB8800",

        "listFilterWidget.background":                       "#EEEEEE",
        "listFilterWidget.noMatchesOutline":                 "#990000",
        "listFilterWidget.outline":                          "#808080",

        "menu.background":                                   "#EEEEEE",
        "menu.foreground":                                   "#404040",
        "menu.selectionForeground":                          "#404040",
        "menu.selectionBackground":                          "#00000011",

        "scrollbar.shadow":                                  "#00000055",
        "scrollbarSlider.activeBackground":                  "#00000020",
        "scrollbarSlider.background":                        "#6F6F6F99",
        "scrollbarSlider.hoverBackground":                   "#00000010",

        "sideBar.border":                                    "#DEDEDE88",
        "sideBar.foreground":                                "#404040",
        "sideBar.background":                                "#EEEEEE",
        "sideBar.dropBackground":                            "#C6DEFF",

        "sideBarSectionHeader.border":                       "#80808000",
        "sideBarSectionHeader.foreground":                   "#404040DD",
        "sideBarSectionHeader.background":                   "#DEDEDE",

        "statusBar.background":                              "#0000A2",
        "statusBar.foreground":                              "#E9E9E9",
        "statusBar.noFolderBackground":                      "#0000A2",
        "statusBar.noFolderForeground":                      "#E9E9E9",

        "terminal.ansiBrightWhite":                          "#EDEDED",
        "terminal.ansiWhite":                                "#BBB",
        "terminal.ansiBrightBlack":                          "#666",
        "terminal.ansiBlack":                                "#000000",
        "terminal.ansiBlue":                                 "#0451A5",
        "terminal.ansiCyan":                                 "#0598BC",
        "terminal.ansiGreen":                                "#00BC41",
        "terminal.ansiMagenta":                              "#BC05BC",
        "terminal.ansiRed":                                  "#CD3131",
        "terminal.ansiYellow":                               "#CC5500",
        "terminal.ansiBrightBlue":                           "#0066FF",
        "terminal.ansiBrightCyan":                           "#0598BC",
        "terminal.ansiBrightGreen":                          "#14CE14",
        "terminal.ansiBrightMagenta":                        "#DB05DB",
        "terminal.ansiBrightRed":                            "#D51015",
        "terminal.ansiBrightYellow":                         "#FF7E00",

        "terminal.border":                                   "#66666611",
        "terminal.foreground":                               "#111111",
        "terminal.background":                               "#EDEDED",
        "terminalCursor.foreground":                         "#4499FF55",
        "terminalCursor.background":                         "#000000AA",
        "terminal.selectionBackground":                      "#4499FF55",

        "tree.indentGuidesStroke":                           "#00000011",

        "titleBar.activeBackground":                         "#D4D0C8",
        "titleBar.activeForeground":                         "#867E6E",
    },

    //#endregion UI

    //#region Syntax

    //#region TextMate

    "tokenColors":
    [
        {
            "name": "Comment",
            "scope": "comment",
            "settings": {
                "fontStyle":  "italic",
                "foreground": "#0066FF"
            }
        },
        {
            "name": "Keyword",
            "scope": "keyword, storage",
            "settings": {
                "fontStyle":  "bold",
                "foreground": "#0000FF"
            }
        },
        {
            "name": "Number",
            "scope": "constant.numeric",
            "settings": {
                "fontStyle": "",
                "foreground": "#0000CD"
            }
        },
        {
            "name": "User-defined constant",
            "scope": "constant",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#C5060B"
            }
        },
        {
            "name": "Built-in constant",
            "scope": "constant.language",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#585CF6"
            }
        },
        {
            "name": "Variable",
            "scope": "variable.language, variable.other",
            "settings": {
                "fontStyle": "",
                "foreground": "#318495"
            }
        },
        {
            "name": "String",
            "scope": "string",
            "settings": {
                "fontStyle": "",
                "foreground": "#036A07"
            }
        },
        {
            "name": "String interpolation",
            "scope": "constant.character.escape, string source",
            "settings": {
                "fontStyle": "",
                "foreground": "#26B31A"
            }
        },
        {
            "name": "Preprocessor line",
            "scope": "meta.preprocessor",
            "settings": {
                "fontStyle": "",
                "foreground": "#1A921C"
            }
        },
        {
            "name": "Preprocessor directive",
            "scope": "keyword.control.import",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#0C450D"
            }
        },
        {
            "name": "Function name",
            "scope": "entity.name.function, support.function.any-method",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#1E39F6"
            }
        },
        {
            "name": "Type name",
            "scope": "entity.name.type",
            "settings": {
                "fontStyle": "underline"
            }
        },
        {
            "name": "Inherited class name",
            "scope": "entity.other.inherited-class",
            "settings": {
                "fontStyle": "italic"
            }
        },
        {
            "name": "Function parameter",
            "scope": "variable.parameter",
            "settings": {
                "fontStyle": "italic"
            }
        },
        {
            "name": "Function argument and result types",
            "scope": "storage.type.method",
            "settings": {
                "fontStyle": "",
                "foreground": "#70727E"
            }
        },
        {
            "name": "Section",
            "scope": "meta.section entity.name.section, declaration.section entity.name.section",
            "settings": {
                "fontStyle": "italic"
            }
        },
        {
            "name": "Library function",
            "scope": "support.function",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#3C4C72"
            }
        },
        {
            "name": "Library object",
            "scope": "support.class, support.type",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#6D79DE"
            }
        },
        {
            "name": "Library constant",
            "scope": "support.constant",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#06960E"
            }
        },
        {
            "name": "Library variable",
            "scope": "support.variable",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#21439C"
            }
        },
        {
            "name": "JS: Operator",
            "scope": "keyword.operator.js",
            "settings": {
                "foreground": "#687687"
            }
        },
        {
            "name": "Invalid",
            "scope": "invalid",
            "settings": {
                "background": "#990000",
                "foreground": "#990000"
            }
        },
        {
            "name": "Invalid trailing whitespace",
            "scope": "invalid.deprecated.trailing-whitespace",
            "settings": {
                "background": "#FFD0D0"
            }
        },
        {
            "name": "Embedded source",
            "scope": "text source, string.unquoted",
            "settings": {
                "background": "#0000000D"
            }
        },
        {
            "name": "Embedded embedded source",
            "scope": "text source string.unquoted, text source text source",
            "settings": {
                "background": "#0000000F"
            }
        },
        {
            "name": "Markup XML declaration",
            "scope": "meta.tag.preprocessor.xml",
            "settings": {
                "fontStyle": "",
                "foreground": "#68685B"
            }
        },
        {
            "name": "Markup DOCTYPE",
            "scope": "meta.tag.sgml.doctype, meta.tag.sgml.doctype entity, meta.tag.sgml.doctype string, meta.tag.preprocessor.xml, meta.tag.preprocessor.xml entity, meta.tag.preprocessor.xml string",
            "settings": {
                "fontStyle": "",
                "foreground": "#888888"
            }
        },
        {
            "name": "Markup DTD",
            "scope": "string.quoted.docinfo.doctype.DTD",
            "settings": {
                "fontStyle": "italic"
            }
        },
        {
            "name": "Markup tag",
            "scope": "meta.tag, declaration.tag",
            "settings": {
                "fontStyle": "",
                "foreground": "#1C02FF"
            }
        },
        {
            "name": "Markup name of tag",
            "scope": "entity.name.tag",
            "settings": {
                "fontStyle": "bold"
            }
        },
        {
            "name": "Markup tag attribute",
            "scope": "entity.other.attribute-name",
            "settings": {
                "fontStyle": "italic"
            }
        },
        {
            "name": "Markup: Heading",
            "scope": "markup.heading",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#0C07FF"
            }
        },
        {
            "name": "Markup: Quote",
            "scope": "markup.quote",
            "settings": {
                "fontStyle": "italic",
                "foreground": "#000000"
            }
        },
        {
            "name": "Markup: List",
            "scope": "markup.list",
            "settings": {
                "foreground": "#B90690"
            }
        },
        {
            "scope": "token.info-token",
            "settings": {
                "foreground": "#316BCD"
            }
        },
        {
            "scope": "token.warn-token",
            "settings": {
                "foreground": "#CD9731"
            }
        },
        {
            "scope": "token.error-token",
            "settings": {
                "foreground": "#CD3131"
            }
        },
        {
            "scope": "token.debug-token",
            "settings": {
                "foreground": "#800080"
            }
        },
        {
            "scope": "comment",
            "settings": {
                "foreground": "#408CFF"
            }
        },
        {
            "scope": "string",
            "settings": {
                "foreground": "#036A07"
            }
        },
        {
            "scope": "constant.numeric",
            "settings": {
                "foreground": "#D51015"
            }
        },
        {
            "scope": "entity.name.type",
            "settings": {
                "foreground": "#CF0E00"
            }
        },
        {
            "scope": "entity.name.class",
            "settings": {
                "foreground": "#CF0E00"
            }
        },
        {
            "scope": "support.type",
            "settings": {
                "foreground": "#CF0E00"
            }
        },
        {
            "scope": "support.class",
            "settings": {
                "foreground": "#CF0E00"
            }
        },
        {
            "scope": "entity.name.function",
            "settings": {
                "foreground": "#1E39F6"
            }
        },
        {
            "scope": "support.function",
            "settings": {
                "foreground": "#1E39F6"
            }
        },
        {
            "scope": "variable.parameter",
            "settings": {
                "foreground": "#D51015"
            }
        },
        {
            "name": "JavaScript Classes",
            "scope": "meta.class entity.name.type.class.js",
            "settings": {
                "foreground": "#1E39F6"
            }
        },
        {
            "name": "JavaScript Method Declaration e.g. `constructor`",
            "scope": "meta.method.declaration storage.type.js",
            "settings": {
                "foreground": "#1E39F6",
                "fontStyle": ""
            }
        },
        {
            "name": "JavaScript Meta Punctuation Definition",
            "scope": "meta.js punctuation.definition.js",
            "settings": {
                "foreground": "#318495"
            }
        },
        {
            "name": "Entity Names in Code Documentations",
            "scope": [
                "entity.name.type.instance.jsdoc",
                "entity.name.type.instance.phpdoc"
            ],
            "settings": {
                "foreground": "#318495"
            }
        },
        {
            "name": "Other Variables in Code Documentations",
            "scope": [
                "variable.other.jsdoc",
                "variable.other.phpdoc"
            ],
            "settings": {
                "foreground": "#318495"
            }
        },
        {
            "name": "JavaScript module imports and exports",
            "scope": [
                "variable.other.meta.import.js",
                "meta.import.js variable.other",
                "variable.other.meta.export.js",
                "meta.export.js variable.other"
            ],
            "settings": {
                "foreground": "#6E79F1"
            }
        },
        {
            "name": "JavaScript Variable Parameter Function",
            "scope": "variable.parameter.function.js",
            "settings": {
                "foreground": "#B60DFC"
            }
        },
        {
            "name": "JavaScript Variable Other ReadWrite",
            "scope": "variable.other.readwrite.js",
            "settings": {
                "foreground": "#D51015"
            }
        },
        {
            "name": "JavaScript[React] Variable Other Object",
            "scope": [
                "variable.other.object.js",
                "variable.other.object.jsx",
                "variable.object.property.js",
                "variable.object.property.jsx"
            ],
            "settings": {
                "foreground": "#D51015"
            }
        },
        {
            "name": "JavaScript Variables",
            "scope": [
                "variable.js",
                "variable.other.js"
            ],
            "settings": {
                "foreground": "#318495"
            }
        },
        {
            "name": "JavaScript Entity Name Type",
            "scope": [
                "entity.name.type.js",
                "entity.name.type.module.js"
            ],
            "settings": {
                "foreground": "#FF9C31"
            }
        },
        {
            "name": "JavaScript Support Classes",
            "scope": "support.class.js",
            "settings": {
                "foreground": "#0000A2"
            }
        },
        {
            "name": "JSON Property Names",
            "scope": "support.type.property-name.json",
            "settings": {
                "foreground": "#0000A2",
                "fontStyle": "bold"
            }
        },
        {
            "name": "Specific JSON Property values like null",
            "scope": "meta.structure.dictionary.json meta.structure.dictionary.value constant.language",
            "settings": {
                "foreground": "#D51015",
                "fontStyle": "italic"
            }
        },
        {
            "name": "RegExp String",
            "scope": [
                "string.regexp",
                "string.regexp keyword.other"
            ],
            "settings": {
                "foreground": "#E18AC7"
            }
        },
        {
            "name": "YAML name of key",
            "scope": "entity.name.tag.yaml",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#0000A2"
            }
        },
        /* (Shell)?scripts */
        {
            "name":  "Shebang",
            "scope": [ "punctuation.definition.comment.shebang",
                       "comment.line.number-sign.shebang"        ],
            "settings": {
                "foreground": "#CF0E00",
                "fontStyle": "italic bold"
            }
        },
        /* tmLanguage YAML/JSON/XML */
        {
            "name":     "Attribute Name",
            "scope":    [ "entity.other.attribute-name" ],
            "settings": {
                "foreground": "#B90690",
                "fontStyle":  "italic"
            }
        },
        { /* Added mostly because the YAML-tmLanguage is buggy */
            "name":     "Unrecognized",
            "scope":    [ "invalid.illegal",
                          "invalid.illegal.unrecognized"  ],
            "settings": {
                "foreground": "#F00",
                "fontStyle":  "italic bold underline",
            }
        },

      /**
       * Note: The proceeding version updates only mark when things were added,
       *       not revised—mostly for recalling after I forget to do the
       *       changelog immediately
       */

      //#region 0.0.6
        /** Javascript
          * Import statements and object literals
          */
        {
            "name": "Javascript Object Literal Keys",
            "scope": "meta.object-literal.key",
            "settings": {
                "fontStyle": "",
                "foreground": "#262C60"
            }
        },
        {
            "name": "Javascript Object Literal Key [Function]",
            "scope": "meta.object.member.js meta.object-literal.key.js entity.name.function.js ",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#172BC0"
            }
        },
        {
            "name": "Javascript Import Statement",
            "scope": [
                "keyword.control.import.js",
                "meta.function-call.js support.function.js"
            ],
            "settings": {
                "fontStyle":  "bold",
                "foreground": "#1E39F6"
            }
        },
        {
            "name": "Javascript Console Object",
            "scope": "meta.function-call.js support.class.console",
            "settings": {
                "fontStyle":  "bold",
                "foreground": "#125CDC"
            }
        },
        /** lua
         *  EmmyLua Documentation/Annotation
         *  - Inteded for immediate use with extended lua syntax in extension
         *    tangzx.emmylua (id: lua, name: EmmyLua). Will append with future
         *    extended grammars.
         */
        {
            "name": "Lua Documentation Type",
            "scope": "comment.line.double-dash.lua keyword.other.documentation",
            "settings": {
                // "foreground": "#00AABB",
                "foreground": "#318495",
                "fontStyle": "italic bold"
            }
        },
      //#region 0.0.7
      //#endregion 0.0.7
        /** General
         *  Import Statements
         *  - from | import (to exclusion of more refined scopes)
         */
        {
            "name": "Import Statements: import Keyword",
            "scope": [
                "keyword.control.import"
            ],
            "settings": {
                "fontStyle":  "bold",
                "foreground": "#1E39F6"
            }
        },
        {
            "name": "Import Statements: from Keyword",
            "scope": [
                "keyword.control.import.from"
            ],
            "settings": {
                "fontStyle":  "bold italic",
                "foreground": "#1E39F6"
            }
        },
      //#endregion 0.0.6

      //#region 0.0.9
        /** JSON
         *  - Property keys now switch between a set of colors for aiding
         *    navigation
         *  - Property key escaped char tweak
         */
        {
            "name": "JSON Property: Escaped Char",
            "scope": [
                "meta.structure.dictionary.json support.type.property-name.json constant.character.escape.json"
            ],
            "settings": {
                "fontStyle": "",
                "foreground": "#26B31A"
            }
        },
        {
            "name": "JSON Property Names, Top Level",
            "scope": [
                "meta.structure.dictionary.json support.type.property-name.json"
            ],
            "settings": {
                "foreground": "#172BC0",
                "fontStyle": ""
            }
        },
        {
            "name": "JSON Property Namx es, Nesting Level: 1",
            "scope": [
                "meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json support.type.property-name.json"
            ],
            "settings": {
                "foreground": "#262C60",
                "fontStyle": ""
            }
        },
        {
            "name": "JSON Property Names, Nesting Level: 2",
            "scope": [
                "meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json support.type.property-name.json"
            ],
            "settings": {
                "foreground": "#172BC0",
                "fontStyle": ""
            }
        },
        {
            "name": "JSON Property Names, Nesting Level: 3",
            "scope": [
                "meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json support.type.property-name.json"
            ],
            "settings": {
                "foreground": "#262C60",
                "fontStyle": ""
            }
        },
        {
            "name": "JSON Property Names, Nesting Level: 4",
            "scope": [
                "meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json support.type.property-name.json"
            ],
            "settings": {
                "foreground": "#1528B4",
                "fontStyle": ""
            }
        },
        {
            "name": "JSON Property Names, Nesting Level: 5",
            "scope": [
                "meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json support.type.property-name.json"
            ],
            "settings": {
                "foreground": "#262C60",
                "fontStyle": ""
            }
        },
        {
            "name": "JSON Property Names, Nesting Level: 6",
            "scope": [
                "meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json support.type.property-name.json"
            ],
            "settings": {
                "foreground": "#0000A2",
                "fontStyle": "",
            }
        },
        {
            "name": "JSON Property Names, Nesting Level: 7",
            "scope": [
                "meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json support.type.property-name.json"
            ],
            "settings": {
                "foreground": "#262C60",
                "fontStyle": ""
            }
        },
        {
            "name": "JSON Property Names, Nesting Level: 8",
            "scope": [
                "meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json support.type.property-name.json"
            ],
            "settings": {
                "foreground": "#0000A2",
                "fontStyle": ""
            }
        },
      //#endregion 0.0.9

      //#region 0.0.10
        /** Stylus
         *  - General scoping details
         */
        {
            "name": "Stylus Variable - Non-Declaration (Targets variable scope in nested meta scope)",
            "scope": "source.stylus meta.property-list.css variable.stylus, source.stylus meta.property-list.css meta.property-value variable.stylus, source.stylus meta.function variable.stylus",
            "settings": {
                "fontStyle": "",
                "foreground": "#132BE1"
            }
        },
        {
            "name": "Stylus Variable - Declaration (Only targets variable scope outside of meta scope)",
            "scope": "source.stylus variable.stylus",
            "settings": {
                "fontStyle": "bold italic",
                "foreground": "#1121D5"
            }
        },
        {
            "name": "Stylus Property Name - Declaration",
            "scope": "source.stylus meta.property-list support.function.mixin.stylus",
            "settings": {
                "fontStyle": "",
                "foreground": "#1F5279"
            }
        },
        {
            "name": "Stylus Hash Key",
            "scope": "source.stylus meta.property-list.css meta.property-key.css",
            "settings": {
                "fontStyle": "",
                "foreground": "#0676A5"
            }
        },
        {
            "name": "Stylus Property Name (Bold Tweak)",
            "scope": "source.stylus support.type.property-name",
            "settings": {
                "fontStyle": "",
                "foreground": "#000044"
            }
        },
        {
            "name": "Stylus Property Value",
            "scope": "source.stylus meta.property-value",
            "settings": {
                "fontStyle": "",
                "foreground": "#0000A2"
            }
        },
        {
            "name": "Stylus Property Value Constant",
            "scope": "source.stylus meta.property-value support.constant.property-value",
            "settings": {
                "fontStyle": "italic",
                "foreground": "#0000A2"
            }
        },
        {
            "name": "Stylus Property Name (Bold Tweak)",
            "scope": "source.stylus meta.property-value punctuation.separator.key-value",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#450C0C"
            }
        },
        {
            "name": "Stylus Numeric Literal Value - Assignment",
            "scope": "source.stylus constant.numeric.css",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#D51015"
            }
        },
        {
            "name": "Stylus Value - Units",
            "scope": "source.stylus constant keyword.other.unit",
            "settings": {
                "fontStyle": "",
                "foreground": "#C51117"
            }
        },
        {
            "name": "Stylus Selector - Class",
            "scope": "source.stylus entity.other.attribute-name.class",
            "settings": {
                "fontStyle": "italic",
                "foreground": "#318495"
            }
        },
        {
            "name": "Stylus Selector - ID ",
            "scope": "source.stylus entity.other.attribute-name.id",
            "settings": {
                "fontStyle": "",
                "foreground": "#D51015"
            }
        },
        {
            "name": "Stylus Selector - Tag",
            "scope": "source.stylus entity.name.tag",
            "settings": {
                "fontStyle": "bold",
                "foreground": "#0000FF"
            }
        },
        {
            "name": "Stylus Interpolation - Variable",
            "scope": "source.stylus meta.interpolation",
            "settings": {
                "fontStyle": "bold underline",
                "foreground": "#318495"
            }
        },
        {
            "name": "Stylus Punctuation - Brace",
            "scope": "source.stylus meta.brace",
            "settings": {
                "fontStyle": "",
                "foreground": "#000000"
            }
        },
        {
            "name": "Stylus Punctuation - At-Rule '@'",
            "scope": "source.stylus meta.at-rule punctuation.definition.keyword",
            "settings": {
                "fontStyle": "",
                "foreground": "#0000FF"
            }
        },
      //#endregion 0.0.10

      //#region 0.0.11
        /** RegExp
         *  - General scoping for nested contexts
         */
        /*
         * [0.0.16 - Modification]
         * Updated: Added additional scopes for shellscript.
         * TODO: Consider generalizing (remove base source.{lang}s) and see
         *       if that causes any problems
         */
        {
            "name": "Regex - Anchors",
            "scope": "entity.other.control.anchors",
            "settings": {
                "foreground": "#FF0000",
                "fontStyle": "bold"
            }
        },
        {
            "name": "Regex - Escaped Characters",
            "scope": "constant.character.escape.general",
            "settings": {
                "fontStyle": "underline"
            }
        },
        {
            "name": "Regex - Quantifier",
            "scope": "support.operator.quantifier.regexp",
            "settings": {
                "foreground": "#0000FF",
                "fontStyle": "bold"
            }
        },
        {
            "name": "Regex - Named Capture Delimiter (?<name>), Lookahead, Lookbehind",
            "scope": [
                "meta.regexp.group string.regexp constant.other.assertion.regexp",
                "meta.group.regexp meta.group.assertion.regexp punctuation.definition.group.assertion.regexp meta.assertion.negative-look-ahead.regexp",
                "meta.group.regexp meta.group.assertion.regexp punctuation.definition.group.regexp",
                "source.js meta.group meta.assertion.negative-look-behind.regexp",
                "source.jsx meta.group meta.assertion.negative-look-behind.regexp",
                "source.js meta.group.regexp punctuation.definition.group.regexp",
                "source.js meta.var.expr.js string.regexp.js meta.group.assertion.regexp punctuation.definition.group.assertion.regexp meta.assertion.negative-look-ahead.regexp",
                "source.js meta.var.expr.js string.regexp.js meta.group.regexp punctuation.definition.group.regexp"
            ],
            "settings": {
                "foreground": "#0088AA",
                "fontStyle": "bold"
            }
        },
        {
            "name": "Regex - Named Capture Declaration",
            "scope": [
                "meta.regexp.group string constant.other variable.other",
                "source.js string.regexp.js meta.group.regexp punctuation.definition.group.regexp variable.other"
            ],
            "settings": {
                "foreground": "#D51015",
                "fontStyle": "bold underline"
            }
        },

        {
            "name": "Regex - Capture Reference Delimiter",
            "scope": [
                "meta.regexp.group keyword.other.subexp-call.regexp"
            ],
            "settings": {
                "foreground": "#D51015",
                "fontStyle": "bold"
            }
        },
        {
            "name": "Regex - Capture Reference",
            "scope": [
                "meta.regexp.group keyword.other.backref variable.other",
                "meta.regexp.group keyword.other.subexp-call.regexp variable.other",
                "meta.group.regexp meta.group.assertion.regexp keyword.other.back-reference.regexp"

            ],
            "settings": {
                "foreground": "#D51015",
                "fontStyle": "underline"
            }
        },
        {
            "name": "Regex - Group Delimiters",
            "scope": [
                "meta.regexp.group storage.type.regexp.group",
                // better-shell-syntax
                "punctuation.definition.group.regexp.shell",
                "source.js meta.var.expr.js string.regexp.js meta.group.regexp punctuation.definition.group.regexp"
            ],
            "settings": {
                "foreground": "#E18AC7",
                "fontStyle": ""
            }
        },
        {
            "name": "Regex - Set Delimiters",
            "scope": [
                "string.regexp.set",
                "string.regexp.set.js",
                "source.js string.regexp meta.group.assertion constant.other.character-class.set punctuation.definition.character-class.regexp",
            ],
            "settings": {
                "foreground": "#6E79F1",
                "fontStyle": ""
            }
        },
        {
            "name": "Regex - Internal Tokens",
            "scope": [
                "source.js string.regexp.js meta.group.assertion.regexp constant.other.character-class.set.regexp",
                "source.js meta.var.expr.js string.regexp.js meta.group.regexp",

                "source.shell meta.var.expr.js string.regexp.js meta.group.regexp",
            ],
            "settings": {
                "foreground": "#0000A2",
                "fontStyle": ""
            }
        },
        {
            "name": "Shellscript - Better Shellscript - Regex Anchors",
            "scope": [
              "keyword.control.anchor.regexp"
            ],
            "settings": {
                // "foreground": "#B60DFC",
                "foreground": "#00D",
                "fontStyle": "bold"
            }
        },
        {
            "name": "Shellscript - Better Shellscript - Regex Uncaptured Group `?:`",
            "scope": [
              "punctuation.definition.group.no-capture.regexp.shell"
            ],
            "settings": {
                // TODO: When a better color for unnamed captures is decided on
                //       merge this one with main scope style
                "foreground": "#D53053",
                "fontStyle": "italic"
            }
        },
        {
            /**
             * Intended to capture [[:space:]], and similar classes.
             * Scopes used by better shell syntax are not very specific so this
             * will overlap.
             *
             * TODO: Add meta.capture.group or more appropirate scope to entire
             *       regexp.
             */
            "name": "Shellscript - Better Shellscript - UNIX Character Classes (?)",
            "scope": [
                "punctuation.definition.character-class.named.regexp.shell"
            ],
            "settings": {
                "foreground": "#0000A2",
                "fontStyle": "italic"
            }
        },
        {
            /**
             * Intended to capture [[:space:]], and similar classes.
             * Scopes used by better shell syntax are not very specific so this
             * will overlap.
             *
             * TODO: Add capture for `-` to style it in a less visible color
             */
            "name": "Shellscript - Better Shellscript - Regexp Set Range",
            "scope": [
                "constant.other.character-class.set.regexp.shell constant.other.character-class.range.regexp.shell"
            ],
            "settings": {
                "foreground": "#0088AA",
                "fontStyle": "bold"
            }
        },
        {
            /**
             * TODO: Refine capture groups for regexp sets in better-shell-syntax
             * TODO: Return to main style for sets after refined captures added
             */
            "name": "Shellscript - Better Shellscript - Regexp Delimiters",
            "scope": [
               "punctuation.definition.character-class.regexp.shell",
               "constant.other.character-class.set.regexp.shell keyword.operator.negation.regexp.shell",
            ],
            "settings": {
                "foreground": "#C00",
                "fontStyle": ""
            }
        },
        {
            /**
             * TODO: Refine capture groups for regexp sets in better-shell-syntax
             * TODO: Return to main style for sets after refined captures added
             */
            "name": "Shellscript - Better Shellscript - Regexp Set Classes (Basic)",
            "scope": [
                "constant.other.character-class.set.regexp.shell"
            ],
            "settings": {
                "foreground": "#0A0",
                "fontStyle": ""
            }
        },
      //#endregion 0.0.11

      //#region 0.0.12
        /** JSON-tmLanguage
         *  - Adjustment for questionable top level error scope
         */
        {
            "name": "JSON-tmLanguage - begin|end|match Definition",
            "scope": "source.json-tmlanguage meta.definition.error.data.json-tmlanguage",
            "settings": {
                "foreground": "#0000A2",
                "fontStyle": ""
            }
        },
      //#endregion 0.0.12

      //#region 0.0.13
        /** Log
         *  - Scopes for grammar used by extension
         *  Workbench colors
         *  - inputOption: activeForeground, activeBackground
         *  - input: background, border, placeholderForeground, foreground
         */
        {
            "scope": "log.debug",
            "settings": {
                "foreground": "#00CC44"
            }
        },
        {
            "scope": "log.error",
            "settings": {}
        },
        {
            "scope": "log.exception",
            "settings": {}
        },
        {
            "scope": "log.info",
            "settings": {
                "foreground": "#2371BB"
            }
        },
        {
            "scope": "log.string",
            "settings": {
                "foreground": "#036A07"
            }
        },
        {
            "scope": "log.exceptiontype",
            "settings": {
                "foreground": "#E97305"
            }
        },
        {
            "scope": "log.warning",
            "settings": {
                "foreground": "#D85306"
            }
        },
      //#endregion 0.0.13
      //#region 0.0.14-15
        /** tmLanguages
         *  - beginCaptures/captures/endCaptures keys
         *  INI
         *  - Scopes for grammar used by extension
         *  TOML
         *  - Table keys
         *  - [0.0.15] Quick fix adding table array keys
         *  Ruby
         *  - Function declaration identifiers
         *  TypeScript/JavaScript
         *  - Decorators
         */
        {
            /**
             * NOTE: tmLanguage related scopes is based on modified fork of
             * Textmate extension (https://github.com/disco0/vscode-tmlanguage)
             * and may possibly diverge from original grammar
             */
            "scope": [
                "entity.other.captures.yaml-tmlanguage",
                "entity.other.captures.json-tmlanguage",
                // In case this is a thing later
                "entity.other.captures.tmlanguage",
            ],
            "settings": {
              "foreground": "#1F5279",
              "fontStyle":  "bold"
            }
        },
        {
            "scope": "keyword.other.definition.ini",
            "settings": {
                "foreground": "#0000DD",
                "fontStyle": ""
            }
        },
        {
            "name": "Ruby: Function Name",
            "scope": "entity.name.function.ruby",
            "settings": {
                "foreground": "#CC0000",
                "fontStyle": "bold"
            }
        },
        /**
         * For [bracketed.sections] in TOML|INI
         */
        {
            "name": "INI | TOML - Group/Section Title",
            "scope": [
                // INI
                "source.ini entity.name.section.group-title punctuation.definition.entity",
                "source.ini entity.name.section.group-title",
            ],
            "settings": {
                "foreground": "#C5060B",
            }
        },
        {
            "name":  "TOML - Array Table",
            "scope": [
                // TOML
                "source.toml meta.array.table.toml variable.key",
                "source.toml punctuation.definition.array.table.toml",
              "source.toml meta.array.table punctuation.separator.dot.toml",
            ],
            "settings": {
                "foreground": "#BB0066",
                "fontStyle": "italic"
            }
        },
        {
            "name":  "TOML - Table Key Delimiter",
            "scope": [
              "source.toml meta.table.toml punctuation.definition.table.toml",
              "source.toml meta.table.toml punctuation.separator.dot"
            ],
            "settings": {
                "foreground": "#C5060B",
                "fontStyle": ""
            }
        },
        {
            "name":  "TOML - Table Key Variable",
            "scope": [
                // TOML
                "source.toml meta.table.toml variable.key",
            ],
            "settings": {
                "foreground": "#C5060B",
                "fontStyle": "bold"
            }
        },
        {
            "name":  "TOML - Inline Table Variable Key",
            "scope": [
              "source.toml variable.key"
            ],
            "settings": {
                "fontStyle": "",
                "foreground": "#0000A2"
            }
        },
        /**
         * Typescript decorators
         * - Semantic highlighting should be shadowing this
         */
        // '@' symbol - Not part of semantic capture token
        {
            "name": "Typescript / Javascript - Decorator @ Symbol",
            "scope": "source punctuation.decorator",
            "settings": {
                "foreground": "#B90690EE",
                "fontStyle":  "italic bold"
            }
        },
        // Decorator call parens - Also not in semantic capture
        {
            "scope": [
                "source meta.decorator meta.brace.round",
            ],
            "settings": {
                "foreground": "#000000",
                "fontStyle": "italic"
            }
        },
        {   // Decorator function body
            "scope": [
                "meta.decorator entity.name.function",
            ],
            "settings": {
                "foreground": "#B90690DD",
                "fontStyle":  "italic"
            }
        },
        // @decoratorVariable
        {   // Variable Body
            "scope": [
                "meta.decorator entity.name.function",
                "meta.decorator variable.other.readwrite",
            ],
            "settings": {
                "foreground": "#B90690",
                "fontStyle":  "italic"
            }
        },
      //#endregion 0.0.14-15

      //#region 0.0.16
        /** Shellscript
         *  - Refined regexp captures used in better-shell-syntax's grammar
         *    extension (used extended sed parsing, etc)
         *  Regexp
         *  - Possibly small adjustments in the process of adding shellscript
         *    regexp styles
         *  {Java,Type}Script
         *  _ Regexp literal flags
         */
        {
            "name": "Regexp - Set Defintition Characters",
            "scope": [
                "constant.other.character-class.set.regexp keyword.operator.negation.regexp",
                "constant.other.character-class.set.regexp punctuation.definition.character-class.regexp"
            ],
            "settings": {
                "foreground": "#A00",
                "fontStyle": ""
            }
        },
        {
            "name": "Regexp - Set Body Characters",
            "scope": [
                "constant.other.character-class.set.regexp"
            ],
            "settings": {
                "foreground": "#0C0",
                "fontStyle": ""
            }
        },
        {
            "name": "Regexp - Set Body Characters - Class",
            "scope": [
                "constant.other.character-class.set.regexp constant.other.character-class.regexp"
            ],
            "settings": {
                "foreground": "#172BC0",
                "fontStyle": "bold"
            }
        },
        {
            "name": "Regexp - Set Body Characters - Escaped",
            "scope": [
                "constant.other.character-class.set.regexp constant.character.escape.backslash.regexp"
            ],
            "settings": {
                "foreground": "#A10000",
                "fontStyle": "italic"
            }
        },
        {
            "name": "{type,java}script Regexp String - Flags",
            "scope": [
                "source.ts meta string.regexp keyword.other.js",
                "source.ts meta string.regexp keyword.other.ts",
                "source.js meta string.regexp keyword.other.ts",
                "source.js meta string.regexp keyword.other.js",
            ],
            "settings": {
                "foreground": "#C5060B",
                "fontStyle": "italic"
            }
        },
      //#endregion 0.0.16

      //#region 0.0.17
        /** Markdown
         *  - Bold text and delimiters
         */
        {
            "name": "Markdown - Bold Section",
            "scope": [
                "markup.bold.markdown"
            ],
            "settings": {
                "fontStyle": "bold"
            }
        },
        {
            "name": "Markdown - Bold Italic Section",
            "scope": [
                "markup.italic.markdown"
            ],
            "settings": {
                "fontStyle": "italic"
            }
        },
        {
            "name": "Markdown - Italic && Bold Section",
            "scope": [
                "markup.italic.markdown markup.bold.markdown",
                "markup.bold.markdown markup.italic.markdown",
            ],
            "settings": {
                "fontStyle": "bold italic"
            }
        },
        {
            "scope": [
                "markup.italic.markdown punctuation.definition.bold.markdown"
            ],
            "name": "Markdown - Bold|Italic Delimiters",
            "settings": {
                "fontStyle": ""
            }
        },
      //#endregion 0.0.17

      //#region 0.0.18
      /**
       * CSS
       * - Selectors
       * - !important
       * - Property Values
       * Markdown
       * - Raw string
       * - Quotation
       * - Quotation begin punctuation
       * Shellscript
       * - Subshell definition (fix for better-shellscript-syntax)
       * - Quoted parameter expansion delimiters / operators - not final color
       * YAML-tmLanguage
       * - Control chars
       * {Java,Type}Script
       * - Refined documentation comment blocks
       * - Depreciated
       * - Nullish coalescing operator
       * Svelte
       * - Script tags
       * Rust
       * NOTE: Rust has a very poor/unrefined grammar in Code, it (and this theme) need improvement
       * - Function Declaration (FIXME)
       * - Attributes
       * - Operators - :: &
       * - Attributes
       * - Core Constants
       * - Types
       * - Core Types
       * - Type parameter
       * - Raw double quoted
       *
       * UI
       * - Increased contrast of sidebar buttons
       */
        {   "scope": "meta.selector.css entity.other.attribute-name.class.css",
            "settings": {
                "foreground": "#1E39F6",
                "fontStyle": ""
            },
        },
        {   "scope": "meta.selector.css entity.other.attribute-name.id.css",
            "settings": {
                "foreground": "#CF0E00",
                "fontStyle": "italic bold"
            }
        },
        {   "scope": "meta.selector.css entity.name.tag.css ",
            "settings": {
                "foreground": "#3C4C72",
                "fontStyle": "underline"
            }
        },
        {   "scope": "entity.other.attribute-name.pseudo-element.css",
            "settings": {
                "foreground": "#318495",
                "fontStyle": "italic bold"
            }
        },
        {   "scope": "keyword.other.important.css",
            "settings": {
                "foreground": "#1E39F6",
                "fontStyle": "italic"
            }
        },
        {   "scope": "meta.property-name.css support.type.property-name.css",
            "settings": {
                "foreground": "#0000A2",
                "fontStyle": ""
            }
        },
        {   "scope": "support.constant.property-value.css",
            "settings": {
                "foreground": "#06960E",
                "fontStyle":   ""
            }
        },
        {   "scope": "markup.inline.raw.string.markdown",
            "name": "Markdown - Inline Raw/Code",
            "settings": {
                "foreground": "#0000A2",
            }
        },
        {   "scope": "markup.quote.markdown",
            "name": "Markdown - Quotation",
            "settings": {
                "foreground": "#000050",
                "fontStyle":   "italic"
            }
        },
        {   "scope": "punctuation.definition.quote.begin.markdown",
            "name": "Markdown - Quotation Begin Punctutation",
            "settings": {
                "foreground":  "#00F", //  "#06960E",
                "fontStyle":   "italic bold"
            }
        },
        {   "scope": "meta.scope.subshell punctuation.definition.subshell",
            "name": "Shellscript - Subshell Parens (zsh Array Fix)",
            "settings": {
                "foreground":  "#145",
                "fontStyle": ""
            }
        },
        {   "scope": [
                //$
                "source.shell string.quoted.double.shell punctuation.definition.variable punctuation.section.bracket.curly.variable.begin.shell",
                // {
                "source.shell string.quoted.double.shell punctuation.section.bracket.curly.variable.begin.shell",
                // }
                "source.shell string.quoted.double.shell punctuation.section.bracket.curly.variable.end.shell",
            ],
            "name": "Shellscript - Quoted Parameter Delimiters (${ ... })",
            "settings": {
                "foreground": "#B90690",
                "fontStyle": ""
            }
        },
        {   "scope": [
                "source.shell string.quoted.double.shell keyword.operator.expansion.shell",
            ],
            "name": "Shellscript - Quoted Parameter Expansion Operator (${... ':' ...})",
            "settings": {
                "foreground": "#B9069080",
                "fontStyle": ""
            }
        },
        {   "scope": [
                "source.yaml-tmlanguage entity.other.control.anchors.regexp",
                "source.yaml-tmlanguage constant.character.escape.special.regexp"
            ],
            "name": "YAML-tmLanguage - Control Chars (\\b, etc)",
            "settings": {
                "foreground": "#26B31A",
                "fontStyle": "bold"
            }

        },
        {   "scope": [
                "comment.block.documentation.ts markup.fenced_code.block punctuation.definition.markdown",
                "comment.block.documentation.js markup.fenced_code.block punctuation.definition.markdown",
            ],
            "name": "(Java|Type)Script - Documentation Comment Code Block Delimiter",
            "settings": {
                "foreground": "#408CFF",
                "fontStyle": ""
            }
        },
        {   "scope": [
                "comment.block.documentation.ts markup.fenced_code.block",
                "comment.block.documentation.js markup.fenced_code.block",
            ],
            "name": "(Java|Type)Script - Documentation Comment Code Block",
            "settings": {
                "foreground": "#222",
                "fontStyle": ""
            }
        },
        {   "scope": [
                "comment.block.documentation.ts markup.fenced_code.block fenced_code.block.language.markdown",
                "comment.block.documentation.js markup.fenced_code.block fenced_code.block.language.markdown",
            ],
            "name": "(Java|Type)Script - Documentation Comment Code Block Language Identifier",
            "settings": {
                "foreground": "#06A",
                "fontStyle": "italic bold"
            }
        },
        {   "scope": [
                "comment.block.documentation.ts markup.fenced_code.block meta.objectliteral",
                "comment.block.documentation.js markup.fenced_code.block meta.objectliteral",
            ],
            "name": "(Java|Type)Script - Documentation Comment Code Block Object Literal (Patch for weird scope when open bracket is on new line)",
            "settings": { "foreground": "#318495", "fontStyle": "" }
        },
        {   "scope": [
                "source.svelte source.js entity.name.label.js",
                "source.svelte source.ts entity.name.label.ts",
            ],
            "name": "Svelte - Script Tags (? TODO: Confirm)",
            "settings": {
                "foreground": "#E00",
                "fontStyle": "bold"
            }
        },
        {   "scope": [
                "source.ts meta.namespace.declaration storage.type.internaldeclaration punctuation.decorator.internaldeclaration",
                "source.ts meta.namespace.declaration storage.type.internaldeclaration",
                "source.js meta.namespace.declaration storage.type.internaldeclaration punctuation.decorator.internaldeclaration",
                "source.js meta.namespace.declaration storage.type.internaldeclaration",
            ],

            "name": "{Type,Java}Script - Depreciated Document Comment Tag",

            "settings": {
                "foreground": "#B90690",
                "fontStyle":    "italic bold"
            }
        },
        {   "scope": [
                "source.ts punctuation.accessor.optional.ts",
                "source.js punctuation.accessor.optional.js"
            ],
            "name": "{Type,Java}Script - ?.",
            "settings": {
                "foreground": "#B90690",
                "fontStyle": "italic"
            }
        },
        {
            "name": "Rust - Attributes",
            "scope":
            [
                "source.rust meta.attribute.rust"
            ],
            "settings": {
              // "foreground": "#BB0066",
              "foreground": "#029A",
              "fontStyle": ""
            }
        },
        {
            "name": "Rust - Function Declaration - Name",
            /**
             * TODO: Rust grammar is really simple - this not only doesn't just highlight
             *       function declarations, but also highlights METHODS
             */
            "scope":
            [
                "source.rust entity.name.function.rust"
            ],
            "settings": {
              "foreground": "#C00",
              "fontStyle": ""
            }
        },
        {
            "name": "Rust - Operator (Intended for `::`)",
            "scope":
            [
                "source.rust keyword.operator.misc"
            ],
            "settings": {
              "foreground": "#118",
              "fontStyle": ""
            }
        },
        {
            "name": "Rust - Sigil Operator (`&`) ",
            "scope":
            [
                "source.rust keyword.operator.sigil.rust"
            ],
            "settings": {
              "foreground": "#00D",
              "fontStyle": "italic"
            }
        },
        {
            "name": "Rust - Type ",
            "scope":
            [
                "source.rust entity.name.type"
            ],
            "settings": {
              "foreground": "#D00",
              "fontStyle": "underline"
            }
        },
        {
            "name": "Rust - Type Parameter ({FuncName}<{Type Param}>)",
            "scope":
            [
                "source.rust meta.type_params"
            ],
            "settings": {
              "foreground": "#D00",
              /**
              * Builtin grammar captures entire body of parameter expression `< ... >` instead
              * of just the actual tokens, e.g. <`Token`>. Readd underline when grammar improves
              */
              "fontStyle": "italic"
            }
        },
        {
            "name": "Rust - Type - Core",
            "scope":
            [
                "source.rust storage.type.core"
            ],
            "settings": {
              "foreground": "#00D",
              "fontStyle": "underline bold"
            }
        },
        {
            "name": "Rust - Constants - Core (`Err`, `Ok`, etc.)",
            "scope":
            [
                "source.rust support.constant.core.rust"
            ],
            "settings": {
              "foreground": "#C00",
              "fontStyle": "bold underline"
            }
        },
        {
            "name": "Rust - Raw Double Quoted (`r# ... #`)",
            "scope":
            [
                "source.rust string.quoted.double.raw.rust"
            ],
            "settings": {
                "foreground": "#038A07"
            }
        },
      //#endregion 0.0.18

      //#region 0.0.19-21
      /**
       * TS/JS
       * - Tuple Element Labels
       * - Super variable identifier
       * UI
       * - Made active sidebar icon background solid
       * - Fixed any regressions that may or may not have been caused by using the
       *   global user settings to modify themes
       */
        {
            "name": "TypeScript Tuple Element Name",
            "scope": [
                // Original strict scope
                // "source.ts meta.type.declaration meta.type.tuple entity.name.label",

                // Fix for annotations in class members, etc
                // "source.ts meta.type.annotation meta.type.tuple entity.name.label",

                // Fix for annotations in return type
                // "source.ts meta.return.type meta.type.tuple entity.name.label",

                // Fuck it fix that will probably need another fix
                "source.ts meta meta.type.tuple entity.name.label",
            ],
            "settings": {
                "foreground": "#C00",
                "fontStyle": "italic underline"
            }
        },
        {
            "name": "{Type,Java}script - `super`",
            "scope": [
              "source.ts variable.language.super",
              "source.js variable.language.super",
            ],
            "settings": {
              "foreground": "#CC0000",
              "fontStyle": "italic underline"
            }
        },

      //#endregion 0.0.19-21


      //#region 0.0.22-23

      /**
       * GitConfig
       * - Config Section Entry Name
       * - Config Section
       * - Config Section
       * - Config Section Delimiters
       * Python
       * - Docstring Body
       * - Docstring Delimiters (`\"\"\"`)
       * YAML-tmLanguage
       * - Control Chars (\b, etc)
       * - Top Level `name`
       * - Top Level `name` - Delimiter `:`
       * - Grammar Identifier
       * - Top Level `repository`
       * - Top Level `repository` - Delimiter `:`
       * - Pattern Property Keyword - `pattern`
       * - Pattern Property Delimiter
       * - Include `#`
       * - Include Identifier
       * - Quoted Match String Quotation Marks
       * - Quoted Include Quotation Marks
       * - Unquoted Scope Name
       * Powershell
       * - Operator
       * - Bracket Punctuation
       * - Pipeline `|`, Continuation `\``
       * - Embedded Blocks
       * bats
       * - Control Keywords
       * - Support Function
       * - Support Variable
       * Autoconf
       * - Logical Expression Scope
       * - Logical Expression Punctutation
       * Shellscript
       * - Test Brackets (`[[` && `]]`), other Logical Expressions
       * - Command Option Flags
       * - Parameter Expansion Operator
       * - Parameter Delimiters
       * Go
       * - Format String Expression
       * - Punctuation - Period
       * - Punctuation - Brackets
       * - Function
       * - (Quoted) Import Path
       * C#
       * - Null Conditional Operator
       * CSS
       * - Variable Declaration
       * - Variable Reference
       * Lua
       * - Table Property
       * - Table Function Property
       * - Function Identifier
       * - EmmyLua Alias - Identifier
       */

        //#region GitConfig

          {   "name": "GitConfig - Config Section Entry Name",
              "scope": [
                  "text.gitconfig meta.section.header.gitconfig entity.name.section"
              ],
              "settings": {
                  "foreground": "#C5060B",
                  "fontStyle": "italic bold"
              }
          },

          {   "name": "GitConfig - Config Section",
              "scope": [
                  "text.gitconfig meta.section.header.gitconfig"
              ],
              "settings": {
                  "foreground": "#C5060B",
                  "fontStyle": ""
              }
          },

          {   "name": "GitConfig - Config Section Delimiters",
              "scope": [
                    "text.gitconfig meta.section.header.gitconfig punctuation.section.brace.bracket.square.begin.gitconfig",
                    "text.gitconfig meta.section.header.gitconfig punctuation.section.brace.bracket.square.end.gitconfig"
              ],
              "settings": {
                  "foreground": "#C5060B"
              }
          },

        //#endregion GitConfig

        //#region Python

          {   "name": "Python - Docstring Body",
              "scope":
              [
                  "source.python string.quoted.double.block.python"
              ],
              "settings": {
                  "foreground": "#036A07A0",
                  "fontStyle": ""
              }
          },

          {   "name": "Python - Docstring Delimiters (`\"\"\"`)",
              "scope":
              [
                  "source.python string.quoted.double.block.python punctuation.definition.string.begin",
                  "source.python string.quoted.double.block.python punctuation.definition.string.end",
              ],
              "settings": {
                  "foreground": "#036A0780",
                  "fontStyle": ""
              }
          },

        //#endregion Python

        //#region YAML-tmLanguage

          // TODO: Flesh out

          //#region YAML-tmLanguage - Top Level Keywords

          {
              "name": "YAML-tmLanguage - Top Level `name`",
              "scope": [
                  "source.yaml-tmlanguage meta.name-main.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage keyword.other.name.yaml-tmlanguage"
              ],
              "settings": {
                  "foreground": "#0000CC",
                  "fontStyle": "bold"
              }
          },

          {
              "name": "YAML-tmLanguage - Top Level `name` - Delimiter `:`",
              "scope": [
                  "source.yaml-tmlanguage meta.name-main.yaml-tmlanguage keyword.control.definition.yaml-tmlanguage"
              ],
              "settings": {
                  "foreground": "#0000CCAA"
              }
          },

          {
              "name": "YAML-tmLanguage - Grammar Identifier",
              "scope": [
                  "source.yaml-tmlanguage meta.name-main.yaml-tmlanguage entity.other.name.yaml-tmlanguage"
              ],
              "settings": {
                  "foreground": "#0000FF",
                  "fontStyle": "bold underline"
              }
          },

          {
              "name": "YAML-tmLanguage - Top Level `repository`",
              "scope": [
                  "source.yaml-tmlanguage meta.repository-block.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage entity.other.repository.yaml-tmlanguage"
              ],
              "settings": {
                  "foreground": "#0000CC",
                  "fontStyle": "bold"
              }
          },

          {
              "name": "YAML-tmLanguage - Top Level `repository` - Delimiter `:`",
              "scope": [
                  "source.yaml-tmlanguage meta.repository-block.yaml-tmlanguage keyword.control.definition.yaml-tmlanguage"
              ],
              "settings": {
                  "foreground": "#0000CCAA"
              }
          },

          //#endregion YAML-tmLanguage - Top Level Keywords

          //#region YAML-tmLanguage - Repository Keywords

          {
              "name": "YAML-tmLanguage - Pattern Property Keyword - `pattern`",
              "scope": [
                  "source.yaml-tmlanguage meta.include.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage keyword.other.include.yaml-tmlanguage"
              ],
              "settings": {
                  "foreground": "#AA0088",
                  "fontStyle": "italic"
              }
          },
          {
              "name": "YAML-tmLanguage - Pattern Property Delimiter",
              "scope": [
                  "source.yaml-tmlanguage meta.include.yaml-tmlanguage keyword.control.definition.yaml-tmlanguage"
              ],
              "settings": {
                  "foreground": "#AA0088AA",
                  "fontStyle": "italic"
              }
          },

          //#endregion YAML-tmLanguage - Repository Keywords

          //#region YAML-tmLanguage - etc

          {
              "name": "YAML-tmLanguage - Include `#`",
              "scope":
              [
                  "source.yaml-tmlanguage meta.include.yaml-tmlanguage meta.value.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage",
                  "source.yaml-tmlanguage meta.include.yaml-tmlanguage meta.value.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage variable.other.include.yaml-tmlanguage"
              ],
              "settings": {
                  "foreground": "#CC000033",
                  "fontStyle": ""
              }
          },

          {
              "name": "YAML-tmLanguage - Include Identifier",
              "scope":
              [
                  "source.yaml-tmlanguage meta.include.yaml-tmlanguage meta.value.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage variable.other.include.yaml-tmlanguage"
              ],
              "settings": {
                  "foreground": "#CC0000",
                  "fontStyle": "bold"
              }
          },

          {
              "name": "YAML-tmLanguage - Quoted Match String Quotation Marks",
              "scope":
              [
                  "source.yaml-tmlanguage meta.repository-block.yaml-tmlanguage meta.match.yaml-tmlanguage punctuation.definition.string.yaml-tmlanguage"
              ],
              "settings": { "foreground": "#036A07" }
          },

          {
              "name": "YAML-tmLanguage - Quoted Include Quotation Marks",
              "scope":
              [

                  "source.yaml-tmlanguage meta.include.yaml-tmlanguage meta.value.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage punctuation.definition.string.yaml-tmlanguage"
              ],
              "settings": { "foreground": "#036A07" }
          },

          {
              "name": "YAML-tmLanguage - Unquoted Scope Name",
              "scope":
              [
                  "source.yaml-tmlanguage meta.repository-block.yaml-tmlanguage meta.name.yaml-tmlanguage meta.value.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage"
              ],
              "settings": { "foreground": "#000088" }
          },

          // NOTE: Instead use lightened color from relevant adjacent scope
          // {
          //     "name": "YAML-tmLanguage - `:` Property-Value Delimiter",
          //     "scope":
          //     [
          //         "source.yaml-tmlanguage meta keyword.control.definition.yaml-tmlanguage"
          //     ],
          //     "settings": { "foreground": "#0000CC" }
          // }

          //#endregion YAML-tmLanguage - etc

        //#endregion YAML-tmLanguage

        //#region Powershell

          {
              "name": "Powershell - Operator",
              "scope": ["source.powershell meta.hashtable.powershell meta.scriptblock.powershell keyword.operator.assignment.powershell"],
              "settings": {
                  "foreground": "#000088",
                  "fontStyle": "bold"
              }
          },

          {
              "name": "Powershell - Bracket Punctuation",
              "scope":
              [
                "source.powershell punctuation.section.bracket.end.powershell",
                "source.powershell punctuation.section.bracket.begin.powershell",
              ],
              "settings": {
                  // "foreground": "#C00",
                  // Returned to this as scopes target anything brackets, not just type brackets
                  "foreground": "#444",
              }
          },

          {
              "name": "Powershell - Pipeline `|`, Continuation `\\``",
              "scope":
              [
                "source.powershell keyword.operator.other.powershell"
              ],
              "settings": {
                  // "foreground": "#C00",
                  // Returned to this as scopes target anything brackets, not just type brackets
                  "foreground": "#005",
                  "fontStyle": ""
              }
          },

        //#endregion Powershell

        //#region {Type,Java}Script

          {   "name": "JavaScript - Import Namespace Identifier",
              "scope":
              [
                "meta.import.js variable.other.readwrite.alias.js",
                "meta.import.jsx variable.other.readwrite.alias.jsx"
              ],
              "settings": {
                  "foreground": "#D00",
                  "fontStyle": "italic bold"
              }
          },

          {   "name": "JavaScript - Import Member Identifier",
              "scope":
              [
                "meta.import.js meta.block.js variable.other.readwrite.alias.js",
                "meta.import.jsx meta.block.js variable.other.readwrite.alias.jsx",
              ],
              "settings": {
                  "foreground": "#03D",
                  "fontStyle": "italic bold"
              }
          },

          // The proceeding scopes were added specifically for markdown embedded source
          {   "name": "{Java,Type}Script - Inherited Class Ident",
              "scope":
              [
                  "meta.class.ts entity.other.inherited-class.ts",
                  "meta.class.tsx entity.other.inherited-class.tsx",
                  "meta.class.js entity.other.inherited-class.js",
                  "meta.class.jsx entity.other.inherited-class.jsx",
              ],
              "settings":
              {
                  "foreground": "#CF0E00",
                  "fontStyle": "underline italic"
              }
          },

          {   "name": "{Java,Type}Script - `this` Keyword/Object",
              "scope":
              [
                  "markup.fenced_code.block variable.language.this.ts",
                  "markup.fenced_code.block variable.language.this.tsx",
                  "markup.fenced_code.block variable.language.this.js",
                  "markup.fenced_code.block variable.language.this.jsx"
              ],
              "settings":
              {
                  "foreground": "#0000C0",
                  "fontStyle": "bold italic"
              }
          },

        //#endregion {Type,Java}Script

        //#region Markdown

          {   "name": "Markdown - Fenced Codeblock Delimiters",
              "scope":
              [
                  "markup.fenced_code.block.markdown punctuation.definition.markdown"
              ],
              "settings": {
                  // Using Generic escape color from ecmascript regexp
                  "foreground": "#26B31A",
                  "fontStyle": "bold"
              }
          },

          {   "name": "Markdown - Fenced Codeblock Language Identifier",
              "scope":
              [
                  "markup.fenced_code.block.markdown fenced_code.block.language.markdown"
              ],
              "settings": {
                  // Using Generic escape color from ecmascript regexp
                  "foreground": "#E18AC7",
                  "fontStyle": "italic underline"
              }
          },

        //#endregion Markdown

        //#region Powershell

          {   "name": "PowerShell - Embedded Blocks",
              "scope":
              [
                "source.powershell meta.embedded"
              ],
              "settings":
              {
                "foreground": "#555555",
                "fontStyle": ""
              }
          },

        //#endregion Powershell

        //#region bats

          {   "name": "BATS - Control Keywords",
              "scope": "keyword.control.bats",
              "settings": {
                  "foreground": "#DD0099",
                  "fontStyle": "bold underline italic"
              }
          },
          {   "name": "BATS - Support Function",
              "scope": "support.function.bats",
              "settings": {
                  "foreground": "#d41515",
                  "fontStyle": "italic"
              }
          },
          {   "name": "BATS - Support Variable",
              "scope": "support.variable.bats",
              "settings": {
                  "foreground": "#DD0000",
                  "fontStyle": "italic"
              }
          },

          //#endregion bats

        //#region Autoconf

          {   "name": "Autoconf - Logical Expression Scope",
              "scope": "source.m4 meta.scope.logical-expression.shell",
              "settings":
              {
                  "foreground": "#CC2222",
                  "fontStyle": "italic"
              }
          },

          {   "name": "Autoconf - Logical Expression Punctutation",
              "scope": "source.m4 punctuation.definition.logical-expression.shell",
              "settings":
              {
                  "foreground": "#AA0000",
                  "fontStyle": "bold"
              }
          },

        //#endregion Autoconf

        //#region Shellscript

          {   "name": "Shellscript - Test Brackets (`[[` && `]]`), other Logical Expressions",
              "scope":
              [
                  "source.shell punctuation.definition.logical-expression.shell"
              ],
              "settings":
              {
                "foreground": "#CC0000",
                "fontStyle": "bold"
              }
          },

          {   "name": "Shellscript - Command Option Flags",
              "scope":
              [
                  "source.shell constant.other.option.shell",
                  "source.shell constant.other.option.dash.shell",
              ],
              "settings":
              {
                "foreground": "#0000AA",
                "fontStyle": ""
              }
          },

          {   "name": "Shellscript - Parameter Expansion Operator",
              "scope":
              [
                  "source.shell keyword.operator.expansion.shell",
              ],
              "settings":
              {
                "foreground": "#CC0000",
                "fontStyle": ""
              }
          },

          {   "name": "Shellscript - Parameter Delimiters",
              "scope":
              [
                  "source.shell punctuation.section.bracket.curly.variable.begin",
                  "source.shell punctuation.section.bracket.curly.variable.end",
              ],
              "settings":
              {
                "foreground": "#AA0000",
                "fontStyle": "bold"
              }
          },

        //#endregion Shellscript

        //#region Go

          {   "name": "Go - Format String Expression",
              "scope": [ "constant.other.placeholder.go" ],
              "settings": {
                  "foreground": "#CC0000",
                  "fontStyle": "bold italic"
              }
          },

          {   "name": "Go - Punctuation - Period",
              "scope":
              [
                  "source.go punctuation.other",
                  "source.go punctuation.definition.begin",
                  "source.go punctuation.definition.end",
              ],
              "settings": {
                  "foreground": "#0000CC",
                  "fontStyle": ""
              }
          },
          {   "name": "Go - Punctuation - Brackets",
              "scope":
              [
                  "source.go punctuation.definition.begin",
                  "source.go punctuation.definition.end",
              ],
              "settings": {
                  "foreground": "#000088",
                  "fontStyle": ""
              }
          },
          {   "name": "Go - Function",
              "scope":
              [
                  "source.go support.function",
              ],
              "settings": {
                  "foreground": "#CC0000",
                  "fontStyle": ""
              }
          },
          {   "name": "Go - (Quoted) Import Path",
              "scope":
              [
                  "source.go entity.name.import",
              ],
              "settings": {
                  "foreground": "#0000FF",
                  "fontStyle": "underline"
              }
          },

        //#endregion Go

        //#region C#

          {   "name": "C# - Null Conditional Operator",
              "scope":
              [
                  "keyword.operator.null-conditional.cs"
              ],
              "settings": {
                  "foreground": "#B90690",
                  "fontStyle": "italic bold"
              }
          },

        //#endregion C#

        //#region CSS

          {   "name": "CSS - Variable Declaration",
              "scope":
              [
                  "variable.css"
              ],
              "settings": {
                  "foreground": "#AA0000",
                  // "foreground": "#318495",
                  "fontStyle": "italic"
              }
          },

          {   "name": "CSS - Variable Reference",
              "scope":
              [
                  "variable.argument.css"
              ],
              "settings": {
                  "foreground": "#318495",
              }
          },

        //#endregion CSS

        //#region Lua

          {   "name": "Lua - Emmylua Alias Definition - Alias Identifier",
              "scope":
              [
                  "comment.line.double-dash.lua variable.lua"
              ],
              "settings":
              {
                  "foreground": "#CC0000",
                  "fontStyle": "underline"
              }
          },

          {   "name": "Lua - Emmylua Generic Declaration - Identifier",
              "scope":
              [
                  "comment.line.double-dash.lua storage.type.generic.lua"
              ],
              "settings":
              {
                  "foreground": "#CC0000",
                  "fontStyle": "bold underline"
              }
          },

          {   "name": "Lua - Emmylua Definition - Parameter Identifier",
              "scope":
              [
                  "comment.line.double-dash.lua entity.name.variable.lua"
              ],
              "settings":
              {
                  "foreground": "#318495",
                  "fontStyle": "italic"
              }
          },

          {   "name": "Lua - Emmylua Definition - Keyword (`fun`, `|`, etc.)",
              "scope":
              [
                  "comment.line.double-dash.lua keyword"
              ],
              "settings":
              {
                  "foreground": "#0000DDCC",
                  "fontStyle": ""
              }
          },

          {   "name": "Lua - Table Property",
              "scope":
              [
                  "variable.other.table.property.lua"
              ],
              "settings":
              {
                  "fontStyle": "italic bold",
                  "foreground": "#1545ac"
              }
          },

          {   "name": "Lua - Table Function Property",
              "scope":
              [
                  "entity.name.function"
              ],
              "settings":
              {
                  "fontStyle": "bold",
                  "foreground": "#D51015"
              }
          },

          {   "name": "Lua - Function Identifier",
              "scope":
              [
                  "meta.function-call.lua entity.name.function"
              ],
              "settings":
              {
                  "fontStyle": "bold",
                  "foreground": "#1f41b1"
              }
          },

          {   "name": "Lua - EmmyLua Alias - Identifier",
              "scope":
              [
                  "comment.line.double-dash variable.lua"
              ],
              "settings":
              {
                  "foreground": "#CC0000",
                  "fontStyle": "bold underline"
              }
          },

        //#endregion Lua

      //#endregion 0.0.22-23

      //#region 0.0.24

      /**
       * RegExp
       * - Capture Group Delimiters
       * - Lookaround Assertion Capture Group Delimiters
       * - Quantifier (Full)
       * - Named Capture Group Identifier
       * - Anchor
       * - Postfix Flags (`/regex/flags`)
       * - Single Character Class
       */
        //#region Regexp

        {   "name": "RegExp - Capture Group Delimiters",
            "scope":
            [
                //#section Perl 5
                "meta.group.regexp.perl punctuation.definition.group",

                //#section ECMAScript
                "meta.group.regexp punctuation.definition.group.regexp",

            ],
            "settings":
            {
                "foreground": "#0088AA",
                "fontStyle": "bold"
            }
        },

        {   "name": "RegExp - Lookaround Assertion Capture Group Delimiters",
            "scope":
            [
                //#section Perl 5
                "meta.group.regexp.perl meta.assertion.look-ahead.regexp.perl",
                "meta.group.regexp.perl meta.assertion.negative-look-ahead.regexp.perl",
                "meta.group.regexp.perl meta.group.assertion.regexp.perl punctuation.definition.group.regexp.perl",

                //#section ECMAScript
                "meta.assertion.look-behind.regexp",
                "meta.assertion.look-ahead.regexp",
                "meta.assertion.negative-look-behind.regexp",
                "meta.assertion.negative-look-ahead.regexp",
                "meta.group.assertion.regexp punctuation.definition.group.regexp",
            ],
            "settings":
            {
                "foreground": "#13A",
                // "foreground": "#B90690",
                "fontStyle": "bold"
            }
        },

        {   "name": "RegExp - Quantifier (Full)",
            "scope":
            [
                //#section Perl 5
                "keyword.operator.quantifier.regexp.perl",

                //#section ECMAScript
                "keyword.operator.quantifier.regexp",
            ],
            "settings":
            {
                "foreground": "#029",
                "fontStyle": ""
            }
        },

        {   "name": "RegExp - Named Capture Group Identifier",
            "scope":
            [
                //#section Perl 5
                // (Declarations not detected in common/extension grammars?)

                //#section ECMAScript
                "punctuation.definition.group.regexp variable.other.regexp",
            ],
            "settings":
            {
                "foreground": "#C00",
                "fontStyle": "underline"
            }
        },

        {   "name": "RegExp - Anchor",
            "scope":
            [
                //#section Perl 5
                "keyword.control.anchor.regexp.perl",

                //#section ECMAScript
                "keyword.control.anchor.regexp",
            ],
            "settings":
            {
                "foreground": "#D00",
                "fontStyle": "bold"
            }
        },

        {   "name": "RegExp - Postfix Flags (`/regex/flags`)",
            "scope":
            [
                //#section Perl 5
                "keyword.control.anchor.regexp.perl",

                //#section ECMAScript
                "source.ts string.regexp.ts keyword.other",
                "source.js string.regexp.js keyword.other",
            ],
            "settings":
            {
                "foreground": "#A00",
                "fontStyle": "italic"
            }
        },

        {   "name": "RegExp - Single Character Class",
            "scope":
            [
                //#section Perl 5
                "keyword.control.anchor.regexp.perl",

                //#section ECMAScript
                "constant.other.character-class.regexp",
            ],
            "settings":
            {
                "foreground": "#C00",
                "fontStyle": ""
            }
        },

        //#endregion Regexp


      //#endregion 0.0.24
    ],

    //#endregion TextMate

    //#region Semantic

    "semanticHighlighting": true,

    "semanticTokenColors":
    {
        //#region 0.0.22
        /**
         * Global
         * - comment
         * - class
         * - keyword
         * - variable.defaultLibrary.readonly
         * Powershell
         * - type
         * - *.language
         * - property
         * - variable
         * - variable.other.readwrite
         * - function
         * - operator
         * - number
         * CSharp
         * - namespace
         * - plainKeyword
         * - controlKeyword
         * - enum
         * - enumMember
         * - operator
         * - parameter
         * - property
         * - member
         * - member.static
         * - field
         * - local
         * - local.declaration
         * - preprocessorText
         * - preprocessorKeyword
         * - xmlDocCommentComment
         * - xmlDocCommentName
         * - xmlDocCommentAttributeName
         * - xmlDocCommentDelimiter
         * - xmlDocCommentText
         * Python
         * - intrinsic
         * - selfParameter
         * - function
         * - function.declaration
         * - module
         * Rust
         * - operator
         * - variable.static.constant
         * - lifetime
         * - function.attribute
         * - namespace
         * - comment.documentation
         * - formatSpecifier
         * - *.intraDocLink
         * - brace.injected
         * - parenthesis.injected
         * - semicolon.injected
         * - comma.injected
         * - angle.injected
         * - punctuation.injected
         * - generic.injected
         * - operator.injected
         * Go
         * - namespace
         * - operator
         * - parameter
         * - parameter.definition
         * - *.definition
         * - type.definition
         * - function
         * - function.definition
         * C
         * - property
         * - variable
         * - variable.local
         * - variable.global
         * - namespace
         * - preprocessorText
         * - preprocessorKeyword
         * - enumMember
         * - macro
         * - memberOperatorOverload
         * Cpp
         * - namespace
         * - preprocessorText
         * - preprocessorKeyword
         * - enumMember
         * - macro
         * - memberOperatorOverload
         * typescript
         * - namespace
         * - enum
         */

        "comment":
        {
            "foreground": "#408CFF"
        },

        "class":
        {
            "foreground": "#DD0000",
            "bold": true,
            "italic": false,
            "underline": true
        },

        "keyword":
        {
            "foreground": "#0000FF",
            "bold": true,
            "italic": false,
            "underline": false
        },

      //#region PowerShell

        "type:powershell":
        {
            "foreground": "#CC0000",
            "bold": true,
            "italic": false,
            "underline": true
        },

        "*.language:powershell":
        {
            "italic": true,
            "foreground": "#00A"
        },

        "property:powershell":
        {
            "foreground": "#1436bf",
            "bold": false,
            "italic": false
        },

        "variable:powershell":
        {
            "foreground": "#118096",
            "italic": false,
            "bold": false,
            "underline": false
        },

        "variable.defaultLibrary.readonly":
        {
            "foreground": "#AA0000",
            "bold": true,
            "italic": true,
            "underline": false
        },

        "variable.other.readwrite:powershell":
        {
            "foreground": "#ff0000"
        },

        "function:powershell":
        {
            "foreground": "#00C",
            "bold": true,
            "italic": false,
            "underline": false
        },

        "operator:powershell":
        {
            "foreground": "#00A",
            "bold": false,
            "italic": false,
            "underline": false
        },

        "number:powershell":
        {
            "foreground": "#CC0000",
            "bold": true,
            "italic": true,
            "underline": false
        },

      //#endregion PowerShell

      //#region C#

        "namespace:csharp": {
            "foreground": "#CC0000",
            "bold":       true,
            "underline":  false,
            "italic":     true
        },

        "plainKeyword:csharp":
        {
            "foreground": "#00F",
            "underline": false,
            "bold": true,
            "italic": true
        },

        "controlKeyword:csharp":
        {
            "foreground": "#00F",
            "underline": false,
            "bold": true,
            "italic": false
        },

        "enum:csharp":
        {
            "foreground": "#D00",
            "underline": true,
            "bold": false,
            "italic": false
        },

        "enumMember:csharp":
        {
            "foreground": "#C00",
            "underline": false,
            "bold": false,
            "italic": true
        },

        "operator:csharp":
        {
            "foreground": "#00A",
            "bold": true,
            "italic": false
        },

        "parameter:csharp":
        {
            "foreground": "#CC0044",
            "underline": false,
            "italic": true
        },

        "property:csharp":
        {
            "foreground": "#0519b5",
            "bold": true,
            "italic": true
        },

        "member:csharp":
        {
            "foreground": "#0017c7",
            "bold": true,
            "italic": false,
            "underline": false
        },

        "member.static:csharp":
        {
            "italic": true,
        },

        "field:csharp":
        {
            "foreground": "#C00",
            "bold": true,
            "italic": false
        },

        "local:csharp":
        {
            "italic": false,
            "foreground": "#318495",
            "bold": false
        },

        "local.declaration:csharp":
        {
            "italic": true
        },

        "preprocessorText:csharp":
        {
            "foreground": "#3388FF",
            "italic": true,
            "bold": true,
            "underline": true
        },

        "preprocessorKeyword:csharp":
        {
            "foreground": "#C00C",
            "italic": false,
            "bold": true,
            "underline": false
        },

        "xmlDocCommentComment:csharp":
        {
            "bold": false,
            "foreground": "#A08"
        },

        "xmlDocCommentName:csharp":
        {
            "bold": false,
            "italic": true,
            "foreground": "#0055AA"
        },

        "xmlDocCommentAttributeName:csharp":
        {
            "bold": false,
            "italic": false,
            "foreground": "#0022DD"
        },

        "xmlDocCommentDelimiter:csharp":
        {
            "bold": false,
            "foreground": "#0066FFC0"
        },

        "xmlDocCommentText:csharp":
        {
            "bold": false,
            "italic": true,
            "underline": false,
            "foreground": "#0066FF"
        },

      //#endregion C#

      //#region Python

        "intrinsic:python": {
            "foreground": "#C00",
            "bold": true
        },

        "selfParameter:python": {
            "foreground": "#DD0000",
            "bold": true,
            "italic": true
        },

        "function:python": {
            "foreground": "#CC0000",
            "bold": false,
            "italic": false
        },

        "function.declaration:python": {
            "foreground": "#CC0000",
            "bold": true,
            "italic": true
        },

        "module:python": {
            "foreground": "#0000AA",
            "bold": true
        },

      //#endregion Python

      //#region Rust

        "operator:rust":
        {
            "foreground": "#0000FF",
            "italic": false,
            "underline": false,
            "bold": false
        },

        // e.g. `DEBUG`
        "variable.static.constant:rust":
        {
            "foreground": "#DD0000",
            "italic": true,
            "bold": true,
            "underline": true
        },

        "lifetime:rust":
        {
            "foreground": "#CC0055",
            "italic": true,
            "underline": false,
            "bold": true
        },

        "function.attribute:rust":
        {
            "foreground": "#99BBCC",
            "italic": true,
            "underline": false,
            "bold": false
        },

        "namespace:rust": {
            "foreground": "#0000AA",
            "bold":       true,
            "underline":  false,
            "italic":     false
        },

        "comment.documentation:rust": {
            "foreground": "#2083ff",
            "bold":       false,
            "underline":  false,
            "italic":     true
        },

        "formatSpecifier:rust": {
            "foreground": "#b90069",
            "bold":       false,
            "underline":  true,
            "italic":     false
        },

        "*.intraDocLink:rust":
        {
            "underline": true,
            "bold": false,
            "italic": false,
            "foreground": "#0000FF"
        },

        //#region Doccomment Injected Syntax

        // Blanket application of base color to various (usually) non-styled syntax
        // elements to emulate base color usually doable with textmate grammar
        // syntax injections

        "brace.injected:rust": {
            "foreground": "#555555",
            "italic": false,
            "bold": false,
            "underline": false
        },

        "parenthesis.injected:rust": {
            "foreground": "#555555",
            "italic": false,
            "bold": false,
            "underline": false
        },

        "semicolon.injected:rust": {
            "foreground": "#555555",
            "italic": false,
            "bold": false,
            "underline": false
        },

        "comma.injected:rust": {
            "foreground": "#555555",
            "italic": false,
            "bold": false,
            "underline": false
        },

        "angle.injected:rust": {
            "foreground": "#555555",
            "italic": false,
            "bold": false,
            "underline": false
        },

        "punctuation.injected:rust": {
            "foreground": "#555555",
            "italic": false,
            "bold": false,
            "underline": false
        },

        "generic.injected:rust": {
            "foreground": "#318495",
            "italic": true,
            "bold": false,
            "underline": false
        },

        // Used for something besides `::`?
        "operator.injected:rust": {
            "foreground": "#0000CC",
            "bold": false,
            "italic": false,
            "underline": false
        },

        //#endregion Doccomment Injected Syntax

      //#endregion Rust

      //#region Go

        "namespace:go": {
            "foreground": "#0000DD",
            "bold":       false,
            "underline":  true,
            "italic":     true
        },

        "operator:go": {
            "foreground": "#000066",
            "bold":       false,
            "underline":  false
        },

        "parameter:go":
        {
            "italic":     true,
            "foreground": "#CC0000"
        },

        "parameter.definition:go":
        {
            "bold": false,
        },

        "*.definition:go":
        {
            "italic": true,
        },

        // ...except type declarations
        "type.definition:go":
        {
            "italic": false
        },

        "function:go":
        {
            "foreground": "#CC0000",
            "bold": false,
            "italic": false,
            "underline": false
        },

        "function.definition:go":
        {
            "italic": true,
        },

      //#endregion Go

      //#region C

        "property:c":
        {
            "foreground": "#0000AA",
            "bold": false,
            "underline": false,
            "italic": false
        },

        "variable:c":
        {
            "foreground": "#ba001c",
            "bold": false,
            "underline": false,
            "italic": false
        },

        "variable.local:c":
        {
            "foreground": "#318495",
            "bold": false,
            "underline": false,
            "italic": false
        },

        "variable.global:c":
        {
            "foreground": "#DD0000",
            "bold": true,
            "underline": true,
            "italic": true
        },

        "namespace:c": {
            "foreground": "#0000EE",
            "italic":     true,
            "bold":       true,
            "underline":  false
        },

        "preprocessorText:c": {
            "foreground": "#3388FF",
            "italic":     true,
            "bold":       true,
            "underline":  true
        },

        "preprocessorKeyword:c": {
            "foreground": "#C00C",
            "italic":     false,
            "bold":       true,
            "underline":  false
        },

        "enumMember:c": {
            "foreground": "#0011DD",
            "italic":     false,
            "bold":       false,
            "underline":  true
        },

        "macro:c":
        {
            "foreground": "#CC0000",
            "italic":     true,
            "bold":       true,
        },

        "memberOperatorOverload:c":
        {
            "italic":     true,
            "underline":  false,
            "bold":       false,
            "foreground": "#1144AA"
        },

      //#endregion C

      //#region C++

        "namespace:cpp": {
            "foreground": "#0000EE",
            "italic":     true,
            "bold":       true,
            "underline":  false
        },

        "preprocessorText:cpp": {
            "foreground": "#3388FF",
            "italic":     true,
            "bold":       true,
            "underline":  true
        },

        "preprocessorKeyword:cpp": {
            "foreground": "#C00C",
            "italic":     false,
            "bold":       true,
            "underline":  false
        },

        "enumMember:cpp": {
            "foreground": "#000088",
            "italic":     false,
            "bold":       false,
            "underline":  true
        },

        "macro:cpp":
        {
            "italic":     true,
            "bold":       true,
            "foreground": "#004499"
        },

        "memberOperatorOverload:cpp":
        {
            "italic":     true,
            "underline":  false,
            "bold":       false,
            "foreground": "#1144AA"
        },

      //#endregion C++

      //#region {Type,Java}Script

        "namespace:typescript":
        {
            "foreground": "#DD0000",
            "bold":       true,
            "underline":  true,
            "italic":     true
        },

        "enum:typescript":
        {
            "foreground": "#0033CC",
            "bold":       false,
            "underline":  true
        },

      //#endregion {Type,Java}Script

      //#region Lua

        // Non-local (global) variable — improve when vscode-lua expands semantic tokens selection
        // (and replaces namespace.depreciated for global variable????)
        "namespace.deprecated:lua":
        {
            "italic": true
        }

      //#endregion Lua

      //#endregion 0.0.22
    }

    //#endregion Semantic
}
